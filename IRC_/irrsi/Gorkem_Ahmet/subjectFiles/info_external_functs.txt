################################ ft_irc External functs / Harici fonksiyonlar ################################

->> socket <<-------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/socket
Kütüphane:
	#include <sys/types.h>
	#include <sys/socket.h>
Fonksiyon:
	int socket(int domain, int type, int protocol);
Tanım:
	socket() işlevi, socket programlamada kullanılan ve iletişim kurmak için bir soket (socket) oluşturmayı sağlar.

->> close <<--------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/close
Kütüphane:
	#include <unistd.h>
Fonksiyon:
	int close(int fd);
Tanım:
	close() işlevi, açılmış bir dosya tanıtıcısını veya soketi kapatmak için kullanılır. 

->> setsockopt <<---------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/setsockopt
Kütüphane:
	#include <sys/socket.h>
Fonksiyon:
	int setsockopt(int socket, int level, int option_name, const void *option_value, socklen_t option_len);
Tanım:
	setsockopt() işlevi, bir soketin seçeneklerini ayarlamak için kullanılır.
		Bağlantı zaman aşımı süresini, tampon boyutlarını, soket seçeneklerini vb. ayarlamak için kullanılabilir.

->> getsockname <<--------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/getsockname
	https://linux.die.net/man/3/getsockname
Kütüphane:
	#include <sys/socket.h>
Fonksiyon:
	int getsockname(int sockfd, struct sockaddr *addrsocklen_t *" addrlen );
	int getsockname(int socket, struct sockaddr *restrict address, socklen_t *restrict address_len);
Tanım:
	getsockname(), bir soketin yerel adres bilgisini almak için kullanılan bir işlevdir.
		Yani, bir soketin hangi yerel IP adresi ve bağlantı noktasına bağlı olduğunu belirlemek için kullanılır.

->> getprotobyname <<-----------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/getprotobyname
Kütüphane:
	#include <netdb.h>
Fonksiyon:
	struct protoent *getprotobyname(const char *name);
Tanım:
	getprotobyname(), bir protokol ismi verildiğinde, ilgili protokolün numarasını elde etmek için kullanılan bir işlevdir.

->> gethostbyname <<------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/gethostbyname
Kütüphane:
	#include <netdb.h>
Fonksiyon:
	struct hostent *gethostbyname(const char *name);
Tanım:
	gethostbyname(), bir host adı veya IP adresi verildiğinde, ilgili ağ adresi bilgilerini çözümlemek için kullanılan bir işlevdir.

->> getaddrinfo <<--------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/getaddrinfo
Kütüphane:
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netdb.h>
Fonksiyon:
	int getaddrinfo(const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res);
Tanım:
	getaddrinfo() işlevi, ağ adresi çözümü ve hazırlanması sürecini basitleştirir ve IP adresleri, bağlantı noktaları gibi ağ parametrelerini elde etmek için kullanışlı bir yol sağlar.
		Bu işlevin dönüş değeri başarılı olup olmadığını belirtir.
		Eğer başarılı olursa, dönüş değeri 0 olacaktır

->> freeaddrinfo <<-------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/freeaddrinfo
Kütüphane:
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netdb.h>
Fonksiyon:
	void freeaddrinfo(struct addrinfo *res);
Tanım:
	freeaddrinfo() işlevi, dinamik olarak ayrılmış bağlantılı liste res için ayrılan belleği serbest bırakır.

->> bind <<---------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/bind
Kütüphane:
	#include <sys/types.h>
	#include <sys/socket.h>
Fonksiyon:
	int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
Tanım:
	bind(), bir soketi belirli bir IP adresi ve bağlantı noktasına bağlamak için kullanılan bir işlevdir.
		Bu işlem, sunucu tarafında kullanılarak belirli bir IP adresi ve portu dinlemek amacıyla soketi yapılandırmayı sağlar.

->> connect <<------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/connect
Kütüphane:
	#include <sys/socket.h>
Fonksiyon:
	int connect(int socket, const struct sockaddr *address, socklen_t address_len);
Tanım:
	connect(), istemci tarafında kullanılarak sunucu soketine bağlanmayı başlatmak için kullanılan bir işlevdir.
		Bu işlem, istemci uygulamalarının sunucu ile iletişim kurabilmek için soketi kullanmaya başlaması anlamına gelir.

->> listen <<-------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/listen
Kütüphane:
	#include <sys/types.h>
	#include <sys/socket.h>
Fonksiyon:
	int listen(int sockfd, int backlog);
Tanım:
	listen(), sunucu tarafında kullanılarak belirli bir soketi bağlama işleminden sonra gelen bağlantıları dinlemeyi başlatmak için kullanılan bir işlevdir.
		Bu işlem, sunucunun gelen bağlantıları kabul etmeye hazır hale gelmesini sağlar.

->> accept <<-------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/accept
Kütüphane:
	#include <sys/socket.h>
Fonksiyon:
	int accept(int socket, struct sockaddr *restrict address, socklen_t *restrict address_len);
Tanım:
	accept(), sunucu tarafında kullanılarak gelen bir bağlantı isteğini kabul etmek ve yeni bir soket oluşturarak istemci ile iletişim kurmak için kullanılan bir işlevdir.

->> htons <<--------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/htons
Kütüphane:
	#include <arpa/inet.h>
Fonksiyon:
	uint16_t htons(uint16_t hostshort);
Tanım:
	htons(), "host to network short" ifadesinin kısaltmasıdır ve bilgisayarın belleğinde temsil edilen sayıları ağ baytlarına dönüştürmek için kullanılır.
		Özellikle ağ iletişimi sırasında büyük ve küçük byte sırası/düzeni (endianness) farklılıklarından kaynaklanan sorunları çözmek için kullanılır.

->> htonl <<--------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/htonl
Kütüphane:
	#include <arpa/inet.h>
Fonksiyon:
	uint32_t htonl(uint32_t hostlong);
Tanım:
	htonl(), "host to network long" ifadesinin kısaltmasıdır ve bilgisayarın belleğinde temsil edilen uzun (4 byte) tam sayıları ağ baytlarına dönüştürmek için kullanılır. 
		Özellikle ağ iletişimi sırasında büyük ve küçük byte sırası/düzeni (endianness) farklılıklarından kaynaklanan sorunları çözmek için kullanılır.

->> ntohs <<--------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/ntohs
Kütüphane:
	#include <arpa/inet.h>
Fonksiyon:
	uint16_t ntohs(uint16_t netshort);
Tanım:
	ntohs(), "network to host short" ifadesinin kısaltmasıdır ve ağ baytlarında temsil edilen kısa (2 byte) tam sayıları, bilgisayarın belleğinde temsil edilen forma dönüştürmek için kullanılır.
		Özellikle ağ iletişimi sırasında büyük ve küçük byte sırası/düzeni (endianness) farklılıklarından kaynaklanan sorunları çözmek için kullanılır.

->> inet_addr <<----------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/inet_addr
Kütüphane:
	#include <sys/socket.h>
	#include <netinet/in.h>
	#include <arpa/inet.h>
Fonksiyon:
	in_addr_t inet_addr(const char *cp);
Tanım:
	inet_addr(), bir IPv4 adresini (dört noktalı notasyonla verilen adres) ondalık sayı tabanından 32-bitlik bir ikili formata çevirmek için kullanılır.
		Bu işlev, ağ iletişiminde IP adreslerini manipüle etmek veya karşılaştırmak amacıyla kullanılır.

->> inet_ntoa <<----------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/3/inet_ntoa
Kütüphane:
	#include <sys/socket.h>
	#include <netinet/in.h>
	#include <arpa/inet.h>
Fonksiyon:
	char *inet_ntoa(struct in_addr in);
Tanım:
	inet_ntoa(), 32-bitlik bir ikili IP adresini dört noktalı ondalık notasyonlu forma çevirmek için kullanılır.
		Bu işlev, ağ iletişiminde IP adreslerini daha okunabilir bir formata dönüştürmek için kullanılır.

->> send <<---------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/send
Kütüphane:
	#include <sys/types.h>
	#include <sys/socket.h>
Fonksiyon:
	ssize_t send(int sockfd, const void *buf, size_t len, int flags);
Tanım:
	send(), bir soketten veri göndermek için kullanılan bir işlevidir.
		Bu işlev, iletişim kurulan soketten veriyi karşı tarafa göndermek için kullanılır.

->> recv <<---------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/recv
Kütüphane:
	#include <sys/types.h>
	#include <sys/socket.h>
Fonksiyon:
	ssize_t recv(int sockfd, void *buf, size_t len, int flags);
Tanım:
	recv(), bir soketten veri almak için kullanılan bir işlevidir.
		Bu işlev, iletişim kurulan soketten veriyi karşı taraftan almak için kullanılır.

->> signal <<-------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/signal
Kütüphane:
	#include <signal.h>
Fonksiyon:
	sighandler_t signal(int signum, sighandler_t handler);
Tanım:
	signal(), belirli bir sinyal alındığında gerçekleştirilecek işlevleri (işaretçileri) ayarlamak veya özelleştirmek için kullanılan bir işlevidir.
		Sinyaller, bir programın çalışma zamanında olayları veya durumları işaretlemek ve işlemek için kullanılır.

->> lseek <<--------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/lseek
Kütüphane:
	#include <sys/types.h>
	#include <unistd.h>
Fonksiyon:
	off_t lseek(int fd, off_t offset, int whence);
Tanım:
	lseek(), bir dosyanın okuma veya yazma konumunu değiştirmek için kullanılan bir işlevidir.
		Bu işlev, dosya işaretçisini belirli bir konuma taşımak veya dosyanın hangi konumda okuma veya yazma yapılacağını ayarlamak için kullanılır.

->> fstat <<--------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/fstat
Kütüphane:
	#include <sys/types.h>
	#include <sys/stat.h>
	#include <unistd.h>
Fonksiyon:
	int fstat(int fd, struct stat *buf);
Tanım:
	fstat(), bir dosyanın durumu ve özellikleri hakkında bilgi almak için kullanılan bir işlevidir.
		Bu işlev, dosyanın boyutu, erişim izinleri, değiştirilme tarihi gibi bilgileri elde etmek için kullanılır.

->> fcntl <<--------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/fcntl
Kütüphane:
	#include <unistd.h>
	#include <fcntl.h>
Fonksiyon:
	int fcntl(int fd, int cmd, ... /* arg */ );
Tanım:
	fcntl(), dosya tanıtıcısının farklı özelliklerini kontrol etmek veya değiştirmek için kullanılan bir işlevidir.
		Bu işlev, dosya tanıtıcısının sınırlarını genişletmek, dosyanın durumunu değiştirmek, kilitlemek gibi işlemleri gerçekleştirmek için kullanılır.

->> poll <<---------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/poll
Kütüphane:
	#include <poll.h>
Fonksiyon:
	int poll(struct pollfd *fds, nfds_t nfds, int timeout);
Tanım:
	poll(), birden fazla dosya tanıtıcısının (soket, dosya vb.) okuma veya yazma durumunu izlemek ve olaylar oluştuğunda ilgili işlemleri gerçekleştirmek için kullanılan bir işlevidir.
		I/O olaylarını takip etmek ve engelleme olmadan çoklu soket veya dosyalar üzerinde aynı anda çalışmak için kullanılır.

->> select <<-------------------------------------------------------------------------------------------------
URL:
	https://linux.die.net/man/2/select
Kütüphane:
	#include <sys/select.h>
	#include <sys/time.h>
	#include <sys/types.h>
	#include <unistd.h>
Fonksiyon:
	int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
Tanım:
	poll() ile aynı işleve sahip fonksiyondur.
	select(), verilen soket veya dosya tanıtıcılarını izleyerek, bu tanıtıcılarda okuma veya yazma yapılabilir durumunun olup olmadığını belirleyen bir sistem çağrısıdır.
		Bu işlev, çoklu olay izleme (I/O multiplexing) sağlayarak aynı anda birden fazla soket veya dosyayı izlemek ve veri akışını yönetmek için kullanılır.
		select() fonksiyonunun temel amacı, I/O işlemlerini engellemeden birden fazla kaynağı izleyebilmektir.

##############################################################################################################